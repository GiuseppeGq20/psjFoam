/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Field Dictionary

FoamFile
{
    version         2.0;
    format          ascii;
    class           volScalarField;
    object          ElPot;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


dimensions      [1 2 -3 0 0 -1 0]; // [kg * m^2 /( s^3 A)]

internalField   uniform  1e-15;

boundaryField
{
     "(wall_ddp1|wall_up1)"       

    {
 	type codedFixedValue;
		value   uniform 1e-15;
    		redirectType    sparkBC;

  	codeOptions //don't touch what follows!!
  	#{

            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude

   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
  	#}; /////////////////////////////////////////////////////
   
	code
    	#{
            	scalarField& field = *this; 
		scalar t = this->db().time().value(); 

const scalar       p1 =  -7.084e+32;  
const scalar       p2 =   3.017e+27;  
const scalar       p3 =  -3.076e+21;  
const scalar       p4 =   -9.95e+14;  
const scalar       p5 =   2.317e+08;  
const scalar       p6 =       986.6;  

const scalar        pp1 =   8.706e+07;        
const scalar        pp2 =  -505.2;               



 const scalar     a0 =   8.934e+04  ;
 const scalar      a1 =  -1.073e+05 ;
 const scalar      b1 =   1.239e+05 ;
 const scalar      a2 =  -1.809e+04 ;
 const scalar      b2 =  -1.259e+05 ;
 const scalar      a3 =   6.752e+04 ;
 const scalar      b3 =   4.214e+04 ;
 const scalar      a4 =  -3.728e+04 ;
 const scalar      b4 =    1.25e+04 ;
 const scalar      a5 =        4817 ;
 const scalar      b5 =  -1.332e+04 ;
 const scalar      a6 =        1536;
 const scalar      b6 =        2404;
 const scalar      w =   2.344e+07 ;

const scalar a= 1.7355e+08;
const scalar b=-867.7419;

		if ( t < 1.766e-06)
		{
		field = scalar ( (p1*pow(t,5) + p2*pow(t,4) + p3*pow(t,3) + p4*pow(t,2) + p5*t + p6)/2); 
		}
		if ( t>=1.766e-06 )   
		{
			if ( t<=1.9e-06)  
			{                
			  field = scalar (  (a0 + a1*cos(t*w) + b1*sin(t*w) 
              		+ a2*cos(2*t*w) + b2*sin(2*t*w) + a3*cos(3*t*w) + b3*sin(3*t*w) 
              		+ a4*cos(4*t*w) + b4*sin(4*t*w) + a5*cos(5*t*w) + b5*sin(5*t*w) 
              		+ a6*cos(6*t*w) + b6*sin(6*t*w))/2 ); 
			}		
		}

		if ( t>=1.9e-06 )   
		{
			if ( t<=2.9e-06)  
			{                
	field = scalar ( (pp1*t + pp2)/2 ); 
			}		
		}
		if ( t > 2.9e-06)
		{
		field = scalar (1e-15); 
		}

   	#};   

     
    }

     "(wall_ddp2|wall_up2)"           
    {
 	type codedFixedValue;
		value   uniform 1e-15;
    		redirectType    sparkBC2;

  	codeOptions //don't touch what follows!!
  	#{

            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude

   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
  	#}; /////////////////////////////////////////////////////
   
	code
    	#{
            	scalarField& field = *this; 
		scalar t = this->db().time().value(); 
            

		const scalar p1=1.649e+21;  
		const scalar p2=-4.444e+15;  
		const scalar p3=1.473e+09;     
		const scalar p4=799.3;

const scalar        pp1 =   8.706e+07;        
const scalar        pp2 =  -505.2;      

 const scalar     a0 =   8.934e+04  ;
 const scalar      a1 =  -1.073e+05 ;
 const scalar      b1 =   1.239e+05 ;
 const scalar      a2 =  -1.809e+04 ;
 const scalar      b2 =  -1.259e+05 ;
 const scalar      a3 =   6.752e+04 ;
 const scalar      b3 =   4.214e+04 ;
 const scalar      a4 =  -3.728e+04 ;
 const scalar      b4 =    1.25e+04 ;
 const scalar      a5 =        4817 ;
 const scalar      b5 =  -1.332e+04 ;
 const scalar      a6 =        1536;
 const scalar      b6 =        2404;
 const scalar      w =   2.344e+07 ;

const scalar a= 1.7355e+08;
const scalar b=-867.7419;

		if ( t < 1.766e-06)
		{
		field = scalar (-(p1*pow(t,3) + p2*pow(t,2) + p3*t + p4)/2); 
		}
		if ( t>=1.766e-06 )   
		{
			if ( t<=1.9e-06)  
			{                
			  field = scalar (-(a0 + a1*cos(t*w) + b1*sin(t*w) 
              		+ a2*cos(2*t*w) + b2*sin(2*t*w) + a3*cos(3*t*w) + b3*sin(3*t*w) 
              		+ a4*cos(4*t*w) + b4*sin(4*t*w) + a5*cos(5*t*w) + b5*sin(5*t*w) 
              		+ a6*cos(6*t*w) + b6*sin(6*t*w))/2); 
			}		
		}

		if ( t>=1.9e-06 )   
		{
			if ( t<=2.9e-06)  
			{                
	field = scalar ( -(pp1*t + pp2)/2 ); 
			}		
		}
		if ( t > 2.9e-06)
		{
		field = scalar (1e-15); 
		}

   	#};   

      
    }

/*
    wall_up      
    {
         type           zeroGradient; 
               
    }*/

 
free 
{
         type           zeroGradient; 
         }




}


// ************************************************************************* //
