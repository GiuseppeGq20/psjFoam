/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      V;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 2 -3 0 0 -1 0];

internalField   uniform 0;

boundaryField
{
    /*"outletSides.*"
    {
        type            fixedValue;
        value   uniform 0;
    }*/
    
    "outlet.*"
    {
        type            fixedValue;
        value           uniform 0;
    }
    
    /*
    electrodSidesTop
    {
        //type            zeroGradient;
        type            fixedValue;
        value   uniform 0;
    }
    */
    
    electrodFaceBot
    {
        type        fixedValue;
        value       uniform 400;
        //type        fixedGradient;
        //gradient    uniform -10;
    }
    electrodFaceTop
    {        
        type        fixedValue;
        value       uniform 400;

        //type        fixedGradient;
        //gradient    uniform 10;
    }
    /*"electrodFace.*"
    {
	    type		 uniformFixedGradient;
	    uniformGradient		coded;
	
	    name 		 gradientV;

        code
        #{
            //scalarField& field = *this; 
		    //scalar t = this->db().time().value();
            scalar value=0.0;

            const scalar       p1 =  -7.084e+32;  
            const scalar       p2 =   3.017e+27;  
            const scalar       p3 =  -3.076e+21;  
            const scalar       p4 =   -9.95e+14;  
            const scalar       p5 =   2.317e+08;  
            const scalar       p6 =       986.6;  

            const scalar        pp1 =   8.706e+07;        
            const scalar        pp2 =  -505.2;               

            const scalar     a0 =   8.934e+04  ;
            const scalar      a1 =  -1.073e+05 ;
            const scalar      b1 =   1.239e+05 ;
            const scalar      a2 =  -1.809e+04 ;
            const scalar      b2 =  -1.259e+05 ;
            const scalar      a3 =   6.752e+04 ;
            const scalar      b3 =   4.214e+04 ;
            const scalar      a4 =  -3.728e+04 ;
            const scalar      b4 =    1.25e+04 ;
            const scalar      a5 =        4817 ;
            const scalar      b5 =  -1.332e+04 ;
            const scalar      a6 =        1536;
            const scalar      b6 =        2404;
            const scalar      w =   2.344e+07 ;

            //const scalar a= 1.7355e+08;
            //const scalar b=-867.7419;

            if ( t < 1.766e-06)
            {
                value = (p1*Foam::pow(t,5) + p2*Foam::pow(t,4) + p3*Foam::pow(t,3) + p4*Foam::pow(t,2) + p5*t + p6)/2; 
            }else if ( t>=1.766e-06 && t<=1.9e-6)   
            {
                value = (a0 + a1*Foam::cos(t*w) + b1*Foam::sin(t*w) 
                        + a2*Foam::cos(2*t*w) + b2*Foam::sin(2*t*w) + a3*Foam::cos(3*t*w) + b3*Foam::sin(3*t*w) 
                        + a4*Foam::cos(4*t*w) + b4*Foam::sin(4*t*w) + a5*Foam::cos(5*t*w) + b5*Foam::sin(5*t*w) 
                        + a6*Foam::cos(6*t*w) + b6*Foam::sin(6*t*w))/2 ; 
            }else if ( t>=1.9e-06 && t <=2.9e-6 )   
            {
                value =  (pp1*t + pp2)/2 ; 
            }else if ( t > 2.9e-06)
            {
                value = 1e-15; 
            }
            
            //forAll(field, faceI)
            //{
            //    field[faceI]=value;
            //}
            return value;
            Info<<"FIELD V BOT: "<<value<<endl;
    	#};    
   	}*/

    //electrodFaceBot
    /*"electrodFace.*"
    {
	    type		 codedFixedValue;
	    value		 uniform 0 ;
	
	    name 		 expVBot;

        code
        #{
            scalarField& field = *this; 
		    scalar t = this->db().time().value();
            scalar value=0.0;

            const scalar       p1 =  -7.084e+32;  
            const scalar       p2 =   3.017e+27;  
            const scalar       p3 =  -3.076e+21;  
            const scalar       p4 =   -9.95e+14;  
            const scalar       p5 =   2.317e+08;  
            const scalar       p6 =       986.6;  

            const scalar        pp1 =   8.706e+07;        
            const scalar        pp2 =  -505.2;               

            const scalar     a0 =   8.934e+04  ;
            const scalar      a1 =  -1.073e+05 ;
            const scalar      b1 =   1.239e+05 ;
            const scalar      a2 =  -1.809e+04 ;
            const scalar      b2 =  -1.259e+05 ;
            const scalar      a3 =   6.752e+04 ;
            const scalar      b3 =   4.214e+04 ;
            const scalar      a4 =  -3.728e+04 ;
            const scalar      b4 =    1.25e+04 ;
            const scalar      a5 =        4817 ;
            const scalar      b5 =  -1.332e+04 ;
            const scalar      a6 =        1536;
            const scalar      b6 =        2404;
            const scalar      w =   2.344e+07 ;

            //const scalar a= 1.7355e+08;
            //const scalar b=-867.7419;

            if ( t < 1.766e-06)
            {
                value = (p1*Foam::pow(t,5) + p2*Foam::pow(t,4) + p3*Foam::pow(t,3) + p4*Foam::pow(t,2) + p5*t + p6)/2; 
            }else if ( t>=1.766e-06 && t<=1.9e-6)   
            {
                value = (a0 + a1*Foam::cos(t*w) + b1*Foam::sin(t*w) 
                        + a2*Foam::cos(2*t*w) + b2*Foam::sin(2*t*w) + a3*Foam::cos(3*t*w) + b3*Foam::sin(3*t*w) 
                        + a4*Foam::cos(4*t*w) + b4*Foam::sin(4*t*w) + a5*Foam::cos(5*t*w) + b5*Foam::sin(5*t*w) 
                        + a6*Foam::cos(6*t*w) + b6*Foam::sin(6*t*w))/2 ; 
            }else if ( t>=1.9e-06 && t <=2.9e-6 )   
            {
                value =  (pp1*t + pp2)/2 ; 
            }else if ( t > 2.9e-06)
            {
                value = 1e-15; 
            }
            
            forAll(field, faceI)
            {
                field[faceI]=value;
            }
            Info<<"FIELD V BOT: "<<field<<endl;
    	#};    
   	}*/

    
    /*electrodFaceTop
    {
        type            codedFixedValue;
        value   uniform 0;
        name    expVTop;

        code
        #{
            scalarField& field = *this; 

		    scalar t = this->db().time().value();
            scalar value=0.0;

            const scalar p1=1.649e+21;  
            const scalar p2=-4.444e+15;  
            const scalar p3=1.473e+09;     
            const scalar p4=799.3;

            const scalar        pp1 =   8.706e+07;        
            const scalar        pp2 =  -505.2;      

             const scalar     a0 =   8.934e+04  ;
             const scalar      a1 =  -1.073e+05 ;
             const scalar      b1 =   1.239e+05 ;
             const scalar      a2 =  -1.809e+04 ;
             const scalar      b2 =  -1.259e+05 ;
             const scalar      a3 =   6.752e+04 ;
             const scalar      b3 =   4.214e+04 ;
             const scalar      a4 =  -3.728e+04 ;
             const scalar      b4 =    1.25e+04 ;
             const scalar      a5 =        4817 ;
             const scalar      b5 =  -1.332e+04 ;
             const scalar      a6 =        1536;
             const scalar      b6 =        2404;
             const scalar      w =   2.344e+07 ;

            //const scalar a= 1.7355e+08;
            //const scalar b=-867.7419;

            if ( t < 1.766e-06)
            {
                value = -(p1*Foam::pow(t,3) + p2*Foam::pow(t,2) + p3*t + p4)/2; 
            
            }else if ( t>=1.766e-06 && t<=1.9e-6) 
            {                
                value = -(a0 + a1*Foam::cos(t*w) + b1*Foam::sin(t*w) 
                        + a2*Foam::cos(2*t*w) + b2*Foam::sin(2*t*w) + a3*Foam::cos(3*t*w) + b3*Foam::sin(3*t*w) 
                        + a4*Foam::cos(4*t*w) + b4*Foam::sin(4*t*w) + a5*Foam::cos(5*t*w) + b5*Foam::sin(5*t*w) 
                        + a6*Foam::cos(6*t*w) + b6*Foam::sin(6*t*w))/2; 		
            }else if ( t>=1.9e-06 && t <=2.9e-6 )               
            {    
                value =  -(pp1*t + pp2)/2 ; 
                    
            }else if ( t > 2.9e-06)
            {
                value = 1e-15; 
            }
            
            forAll(field, faceI)
            {
                field[faceI]=value;
            }

            Info<<"FIELD V TOP: "<<field<<endl;
      #};  
    }*/
    /*"electrodFaceTop"
    {
        //type            zeroGradient;
        type            fixedValue;
        value   uniform 0;
    }*/
    
    /*"electrodFaceBot"
    {
        type            fixedValue;
        value   uniform 400;
    }*/

    "electrodSides.*"
    {
        type            zeroGradient;
    }

    "(front|back)"
    {
        type            wedge;
    }

    axis
    {
        type empty;
    }
}


// ************************************************************************* //
